# ideacompany hosts 설정
127.0.0.1 db.internal.ideacompany.com	#for K8s
127.0.0.1 pgsql							#for Docker
127.0.0.1 redis-master-lb				#for K8s
127.0.0.1 dingrr						#for Docker
127.0.0.1 etm-infra-eureka-lb			#for K82
127.0.0.1 etm-infra-eureka				#for Docker

#docker image 빌드
  docker build . -f Dockerfile -t etm-auth-control:202104241
  docker build . -f Dockerfile -t etm-infra-eureka:202104241
  docker build . -f Dockerfile -t etm-infra-gateway:202104241
  docker build . -f Dockerfile -t etm-svc-control:202104241
  
# docker 실행 - host 네트워크에서 실행되도록 함(host의 address를 공유하고 port만 구분됨)
  docker network create ideacompany-net

  docker run -d --name etm-infra-eureka -p 8761:8761 --network ideacompany-net etm-infra-eureka:202104241
  docker run -d --name etm-auth-control -p 8091:8091 --network ideacompany-net --link pgsql:dbpostgre etm-auth-control:202104241
  docker run -d --name etm-svc-control -p 8090:8090 --network ideacompany-net --link pgsql:dbpostgre etm-svc-control:202104241
  docker run -d --name etm-infra-gateway -p 8080:8080 --network ideacompany-net etm-infra-gateway:202104241
  
#docker image 빌드 - docker registry에 등록 시...  
  docker build . -f Dockerfile_eureka -t registry.secuiot/etm-infra-eureka:202104151
  docker build . -f Dockerfile_gateway -t registry.secuiot/etm-infra-gateway:202104151
  docker build . -f Dockerfile_svc -t registry.secuiot/etm-svc-control:202104151
  docker build . -f Dockerfile_auth -t registry.secuiot/etm-auth-control:202104151
  
  docker push registry.secuiot/etm-infra-eureka:202104151
  docker push registry.secuiot/etm-infra-gateway:202104151
  docker push registry.secuiot/etm-svc-control:202104151
  docker push registry.secuiot/etm-auth-control:202104151

# docker image 저장하는 방법
  docker image pull [쿠버네티스에서 가져올 배포된 이미지 명]
  docker save -o [저장될 파일명] [저장할 파일로 변환할 이미지 명]

  docker image pull registry.secuiot/develop/dsp-ui-control:20200205.1_e51bc3457b1659a43df76966290cc0581d0f78a0
  docker save -o registry.secuiot-develop-dsp-ui-control-20200205-1_e51bc3457b1659a43df76966290cc0581d0f78a0.tar registry.secuiot/develop/dsp-ui-control:20200205.1_e51bc3457b1659a43df76966290cc0581d0f78a0

# docker image build 후 registry 서버에 push 하는 방법
  docker tag etm-infra-eureka:latest registry.secuiot/etm-infra-eureka:20210414.1
  docker push registry.secuiot/etm-infra-eureka:20210414.1

# docker registry에서 pull해서 실행하는 방법
  docker run registry.secuiot/etm-infra-eureka:20210414.1

# 이미지 확인하기
  curl -X GET http://registry.secuiot/v2/_catalog

# 태그 정보 확인하기
  curl -X GET http://registry.secuiot/v2/etm-infra-eureka/tags/list

#Kubernates secret 생성
  kubectl create secret tls star-kwangsiklee-com --key star.kwangsiklee.com.key --cert star.kwangsiklee.com.crt

# Redis 사용법
	cd /usr/bin
	./redis-cli
	- DB선택  : select {index}  -  default index는 0임
	- key 리스트 가져오기 : keys {인자}  - 예) keys ot_* : ot_ 로 시작하는 모든 key 리스트
	- 특정 key의 hashmap내 field의 값 가져오기 hget {key} {field} - 예) hget ot_505001 assetsid
	- 특정 key의 hashmap 다 가져오기 hgetall {key} - 예) hgetall ot_505001
	- 특정 key의 hashmap의 key들만 다 가져오기 hkeys {key} - 예) hkeys ot_505001
	- 특정 key의 hashmap의 value들만 다 가져오기 hkeys {key} - 예) hvals ot_505001
	- 특정 key의 hashmap내 field만 지우기 hdel {key} {field} - 예) hdel ot_505001 assetsid


# zookeeper 명령어
	cd /opt/zookeeper/bin
	./zkCli.sh
	- node 생성
	   create -[options] /[znode-name] [znode-data]
		  persistent(기본값) : create /znode my_data
		  Ephemeral : create –e /eznode my_data
		  Sequential : create –s /sznode my_data
	- node 읽기
	   get /[znode_name]   
	- node 데이터 설정
	  set /[znode_name] [new_data]
	- node 삭제
	  delete /[znode_name]
	- node 목록
	  ls [znode_name]


# Kafka 명령어
	1. topic
		1.1. topic create
				 ./kafka-topics.sh --zookeeper zk-svc:2181 --replication-factor [no] --partition [no] --topic [topicNm] --create

		1.2. topic list
				 ./kafka-topics.sh --zookeeper zk-svc:2181 --list

		1.3. topic detail
				  ./kafka-topics.sh --zookeeper zk-svc:2181 --describe --topic [topicNm]

		1.4. topic 보관주기 변경 (default 7일 = 604,800,000)
			확인 (default 속성이 아닌것 표시)
			./kafka-configs.sh --zookeeper zk-svc:2181 --describe --entity-type topics --entity-name [topicNm]

				 1시간 = 3,600,000
				 ./kafka-configs.sh --zookeeper zk-svc:2181 --alter --entity-type topics --entity-name [topicNm] --add-config retention.ms=3600000

		1.5. topic 보관주기 설정을 삭제하기
				 ./kafka-configs.sh --zookeeper zk-svc:2181 --alter --entity-type topics --entity-name [topicNm] --delete-config retention.ms

	2. producer
		2.1. message send (stdin)
				 ./kafka-console-producer.sh --broker-list kafka-svc:9093 --topic [topicNm]

		2.1. message send (from file)
				 ./kafka-console-producer.sh --broker-list kafka-svc:9093 --topic [topicNm] < filename

	3. consumer
		3.1. message read (stdout)
				 ./kafka-console-consumer.sh --bootstrap-server kafka-svc:9093 --topic [topicNm]
				 ./kafka-console-consumer.sh --bootstrap-server kafka-svc:9093 --topic [topicNm] --from-beginning

		3.2. message read (specific offset)
				 opt/kafka/bin/kafka-console-consumer.sh --bootstrap-server kafka-svc:9093 --topic [topicNm] --partition [partitionNo] --offset [offsetNo] --max-messages [num]

		3.3. message read (with consumer group)
				 ./kafka-console-consumer.sh --bootstrap-server kafka-svc:9093 --topic [topicNm] -consumer-property group.id=[consumerGrpNm]

		3.4 consumer gropu list
				 ./kafka-consumer-groups.sh  --list --bootstrap-server kafka-svc:9093 

		3.5 consumer status and offset check! (offset & lag)

		./kafka-consumer-groups.sh  --bootstrap-server kafka-svc:9093 --group [consumberGN] --describe                     
		/opt/kafka/bin/kafka-consumer-groups.sh  --bootstrap-server kafka-svc:9093 --group simple1 --describe

		## 이거는 안 먹네...
		./kafka-consumer-groups.sh --bootstrap-server kafka-svc:9093 --group simple1 --topic base-event --reset-offsets --to-earliest --execute
 
	4. consumer group 
		4.1. list
				 ./kafka-consumer-groups.sh --bootstrap-server kafka-svc:9093 --list

		4.2. 상태확인
				 ./kafka-consumer-groups.sh --bootstrap-server kafka-svc:9093 --describe --group [consumerGrpNm]

	* 현재 특정 topic, 특정 consumer group이 소모하고 있는 event확인은 다음 단계로 해라...
		1. 파티션별 현재 offset 확인 : /opt/kafka/bin/kafka-consumer-groups.sh  --bootstrap-server kafka-svc:9093 --group simple1 --describe
		2. 해당 offset의 데이터 확인 : /opt/kafka/bin/kafka-console-consumer.sh --bootstrap-server kafka-svc:9093 --topic [topicNm] --partition [partitionNo] --offset [offsetNo] --max-messages [num]

